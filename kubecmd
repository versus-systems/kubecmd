#!/usr/bin/env bash

namespace=default
deployment=""

while getopts n:d: name
  do
    case $name in
      n) namespace="$OPTARG";;
      d) deployment_name="$OPTARG";;
    esac
done

shift $(expr $OPTIND - 1 )
command=$@

container=$(kubectl get deployment $deployment_name --namespace $namespace -o json \
  | jq '.spec.template.spec.containers[0].command = ["sleep", "1d"]' \
  | jq 'del(.spec.template.spec.containers[0].livenessProbe)' \
  | jq 'del(.spec.template.spec.containers[0].readinessProbe)' \
  | jq '.spec.template.spec.containers[0]')

job_name="${deployment_name}-cmd-$RANDOM"

kubectl create --namespace $namespace -f - <<-JOB
{
  "apiVersion": "batch/v1",
  "kind": "Job",
  "metadata": {
    "name": "$job_name",
    "labels": {
      "app": "cmd"
    }
  },
  "spec": {
    "template": {
      "metadata": {
        "labels": {
          "job": "$job_name"
        }
      },
      "spec": {
        "restartPolicy": "Never",
        "containers": [$container]
      }
    }
  }
}
JOB

printf "connecting ."

pod_name=$(kubectl get pod -n develop -l job=$job_name -o jsonpath="{.items[0].metadata.name}")

while [[ $(kubectl get pod $pod_name -n $namespace -o jsonpath="{..status.containerStatuses[0].ready}") != "true" ]]; do
  printf "."
  sleep 1
done

kubectl exec -it --namespace $namespace $pod_name $command
kubectl delete job $job_name --namespace $namespace
